// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: PhBook.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PhoneBookService_RegisterUser_FullMethodName = "/PhBook.PhoneBookService/RegisterUser"
	PhoneBookService_AuthUser_FullMethodName     = "/PhBook.PhoneBookService/AuthUser"
	PhoneBookService_AddContact_FullMethodName   = "/PhBook.PhoneBookService/AddContact"
	PhoneBookService_DelContact_FullMethodName   = "/PhBook.PhoneBookService/DelContact"
	PhoneBookService_FindContact_FullMethodName  = "/PhBook.PhoneBookService/FindContact"
	PhoneBookService_GetContacts_FullMethodName  = "/PhBook.PhoneBookService/GetContacts"
)

// PhoneBookServiceClient is the client API for PhoneBookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PhoneBookServiceClient interface {
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	AuthUser(ctx context.Context, in *AuthUserRequest, opts ...grpc.CallOption) (*AuthUserResponse, error)
	AddContact(ctx context.Context, in *AddContactRequest, opts ...grpc.CallOption) (*AddContactResponse, error)
	DelContact(ctx context.Context, in *DelContactRequest, opts ...grpc.CallOption) (*DelContactResponse, error)
	FindContact(ctx context.Context, in *FindContactRequest, opts ...grpc.CallOption) (*FindContactResponse, error)
	GetContacts(ctx context.Context, in *GetContactsRequest, opts ...grpc.CallOption) (*GetContactsResponse, error)
}

type phoneBookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPhoneBookServiceClient(cc grpc.ClientConnInterface) PhoneBookServiceClient {
	return &phoneBookServiceClient{cc}
}

func (c *phoneBookServiceClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, PhoneBookService_RegisterUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneBookServiceClient) AuthUser(ctx context.Context, in *AuthUserRequest, opts ...grpc.CallOption) (*AuthUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthUserResponse)
	err := c.cc.Invoke(ctx, PhoneBookService_AuthUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneBookServiceClient) AddContact(ctx context.Context, in *AddContactRequest, opts ...grpc.CallOption) (*AddContactResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddContactResponse)
	err := c.cc.Invoke(ctx, PhoneBookService_AddContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneBookServiceClient) DelContact(ctx context.Context, in *DelContactRequest, opts ...grpc.CallOption) (*DelContactResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelContactResponse)
	err := c.cc.Invoke(ctx, PhoneBookService_DelContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneBookServiceClient) FindContact(ctx context.Context, in *FindContactRequest, opts ...grpc.CallOption) (*FindContactResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindContactResponse)
	err := c.cc.Invoke(ctx, PhoneBookService_FindContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneBookServiceClient) GetContacts(ctx context.Context, in *GetContactsRequest, opts ...grpc.CallOption) (*GetContactsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContactsResponse)
	err := c.cc.Invoke(ctx, PhoneBookService_GetContacts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhoneBookServiceServer is the server API for PhoneBookService service.
// All implementations must embed UnimplementedPhoneBookServiceServer
// for forward compatibility.
type PhoneBookServiceServer interface {
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	AuthUser(context.Context, *AuthUserRequest) (*AuthUserResponse, error)
	AddContact(context.Context, *AddContactRequest) (*AddContactResponse, error)
	DelContact(context.Context, *DelContactRequest) (*DelContactResponse, error)
	FindContact(context.Context, *FindContactRequest) (*FindContactResponse, error)
	GetContacts(context.Context, *GetContactsRequest) (*GetContactsResponse, error)
	mustEmbedUnimplementedPhoneBookServiceServer()
}

// UnimplementedPhoneBookServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPhoneBookServiceServer struct{}

func (UnimplementedPhoneBookServiceServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedPhoneBookServiceServer) AuthUser(context.Context, *AuthUserRequest) (*AuthUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthUser not implemented")
}
func (UnimplementedPhoneBookServiceServer) AddContact(context.Context, *AddContactRequest) (*AddContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContact not implemented")
}
func (UnimplementedPhoneBookServiceServer) DelContact(context.Context, *DelContactRequest) (*DelContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelContact not implemented")
}
func (UnimplementedPhoneBookServiceServer) FindContact(context.Context, *FindContactRequest) (*FindContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindContact not implemented")
}
func (UnimplementedPhoneBookServiceServer) GetContacts(context.Context, *GetContactsRequest) (*GetContactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContacts not implemented")
}
func (UnimplementedPhoneBookServiceServer) mustEmbedUnimplementedPhoneBookServiceServer() {}
func (UnimplementedPhoneBookServiceServer) testEmbeddedByValue()                          {}

// UnsafePhoneBookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PhoneBookServiceServer will
// result in compilation errors.
type UnsafePhoneBookServiceServer interface {
	mustEmbedUnimplementedPhoneBookServiceServer()
}

func RegisterPhoneBookServiceServer(s grpc.ServiceRegistrar, srv PhoneBookServiceServer) {
	// If the following call pancis, it indicates UnimplementedPhoneBookServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PhoneBookService_ServiceDesc, srv)
}

func _PhoneBookService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneBookServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhoneBookService_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneBookServiceServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhoneBookService_AuthUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneBookServiceServer).AuthUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhoneBookService_AuthUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneBookServiceServer).AuthUser(ctx, req.(*AuthUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhoneBookService_AddContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneBookServiceServer).AddContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhoneBookService_AddContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneBookServiceServer).AddContact(ctx, req.(*AddContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhoneBookService_DelContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneBookServiceServer).DelContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhoneBookService_DelContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneBookServiceServer).DelContact(ctx, req.(*DelContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhoneBookService_FindContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneBookServiceServer).FindContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhoneBookService_FindContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneBookServiceServer).FindContact(ctx, req.(*FindContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhoneBookService_GetContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneBookServiceServer).GetContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhoneBookService_GetContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneBookServiceServer).GetContacts(ctx, req.(*GetContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PhoneBookService_ServiceDesc is the grpc.ServiceDesc for PhoneBookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PhoneBookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PhBook.PhoneBookService",
	HandlerType: (*PhoneBookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _PhoneBookService_RegisterUser_Handler,
		},
		{
			MethodName: "AuthUser",
			Handler:    _PhoneBookService_AuthUser_Handler,
		},
		{
			MethodName: "AddContact",
			Handler:    _PhoneBookService_AddContact_Handler,
		},
		{
			MethodName: "DelContact",
			Handler:    _PhoneBookService_DelContact_Handler,
		},
		{
			MethodName: "FindContact",
			Handler:    _PhoneBookService_FindContact_Handler,
		},
		{
			MethodName: "GetContacts",
			Handler:    _PhoneBookService_GetContacts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "PhBook.proto",
}
